'use strict';

const _ = require('lodash');
const expect = require('chai').expect;
const util = require('../../../util');
const describeSolution = util.describeSolution;

describe('Indexing a document', () => {

  before(util.indexDropper('megacorp', 'othercorp'));

  const solution1 = '/guide/01-getting-started/02-data-in-data-out/02-indexing-a-document-01.txt';
  const solution2 = '/guide/01-getting-started/02-data-in-data-out/02-indexing-a-document-02.txt';
  const solution3 = '/guide/01-getting-started/02-data-in-data-out/02-indexing-a-document-03.txt';
  const solution4 = '/guide/01-getting-started/02-data-in-data-out/02-indexing-a-document-04.txt';

  describeSolution(solution1, () => {
    it('should be able to index new employee with id 1 in megacorp index', () => {
      return util.executeSolution(solution1)
        .then(res => {
          expect(res.statusCode).to.equal(201);
          expect(res.body).to.have.property('_index', 'megacorp');
          expect(res.body).to.have.property('_type', 'employee');
          expect(res.body).to.have.property('_id', '1');
          expect(res.body).to.have.property('created', true);
        });
    });
  });
  describeSolution(solution2, () => {
    it('should be able to index new employee with id 1 in othercorp index', () => {
      return util.executeSolution(solution2)
        .then(res => {
          expect(res.statusCode).to.equal(201);
          expect(res.body).to.have.property('_index', 'othercorp');
          expect(res.body).to.have.property('_type', 'employee');
          expect(res.body).to.have.property('_id', '1');
          expect(res.body).to.have.property('created', true);
        });
    });
  });
  describeSolution(solution3, () => {
    it('should be able to index new customer with id 1 in megacorp index', () => {
      return util.executeSolution(solution3)
        .then(res => {
          expect(res.statusCode).to.equal(201);
          expect(res.body).to.have.property('_index', 'megacorp');
          expect(res.body).to.have.property('_type', 'customer');
          expect(res.body).to.have.property('_id', '1');
          expect(res.body).to.have.property('created', true);
        });
    });
  });

  describeSolution(solution4, () => {
    it('should be able to index new customer with autogenerated id', () => {
      return util.executeSolution(solution4)
        .then(res => {
          expect(res.statusCode).to.equal(201);
          expect(res.body).to.have.property('_index', 'megacorp');
          expect(res.body).to.have.property('_type', 'customer');
          expect(res.body).to.have.property('_id');
          expect(res.body).to.have.property('created', true);
          return util.executeSolution(solution4);
        })
        .then(res => {
          expect(res.statusCode).to.equal(201);
          expect(res.body).to.have.property('_index', 'megacorp');
          expect(res.body).to.have.property('_type', 'customer');
          expect(res.body).to.have.property('_id');
          expect(res.body).to.have.property('created', true);
        });
    });
  });
});
